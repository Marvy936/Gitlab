. -> add dot before job's name to hide it from pipeline.

image: ubuntu -> base image which will be used to run pipeline.

before_script: / after_script: -> before / after script, commands lower will be executed.
    - apt update; apt install -y gcc

cache:
   paths:
       - "./program" -> specifes what have to be saved for other jobs, can be more paths.
       - "./test" -> another path.

stages: -> define stages in order they will be executed.
   - syntax
   - compile
   - test
   - deploy

check: -> job's name.
   image: gcc -> use image gcc for this job.
   stage: syntax -> stage where the job belongs.
   script: -> commands to run. 
       - gcc -fsyntax-only program.c

compiling:
   image: gcc
   stage: compile
   only: -> the job will run only in listed branch.
       - test -> branch.
   script: ->
       - gcc -v -o program program.c 2> gcc.log -> created in job.
   artifacts: -> will save certain paths.
       paths:
           - "gcc.log" -> saving file from job.
       expire_in: 1 week/day/hour -> set expiration.
       when: on_failure/on_success/always -> saves artifact only when conditions are met.
    
testing: 
   stage: test
   script:
       - bash test.sh

cleaning:
   stage: test
   script: rm ./program
   when: on_failure/on_success/always/manual/delayed -> when previous job fail, when previous job success, always, job is run manually by user, job is delayed by X time.
   start_in: 30 minutes/hour/day -> only used with delayed option.
   except: -> the job will not run in listed branch. 
       - main -> branch.

upload:
   stage: deploy
   script:
       - echo "uploading app..."
   when: manual -> need to be run manually, job will not run automatically.

--- GITLAB NEEDS

execute_A:
    needs: [compile_A] -> will wait for the job two finish not whole stage.
    tags: 
        - telekom -> we tagged our runner with telekom tag, it will use that runner.
    stage: execute
    script:
    - echo "Running the program..."
    - java HelloWorld

--- GITLAB SSH

script:
   - apk update ; apk add openssh-client
   - eval $(ssh-agent -s)
   - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null -> $SSH_PRIVATE_KEY is defined in variables on website with your private key.
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh
   - ssh-keyscan $AWS_IP >> ~/.ssh/known_hosts -> $AWS_IP is defined in variables on website with your public IP.
   - chmod 644 ~/.ssh/known_hosts
   - ssh $USER@$AWS_IP "date;"

--- GITLAB PAGES

Links on created pages are on the website. Deploy/Pages and you can change visibility at Settings/Visibility and there are Pages.

pages:
    image: alpine:latest
    script:
        - mkdir -p ./public
        - cp ./*.html ./public/ -> copy static content to public, that will be the content of page.
    artifacts:
        paths:
            - public
    except:
    - main

--- GITLAB ENVIROMENT

job_branch:
  stage: deploy
  except:
      - main
  script:
      - echo "data na $CI_ENVIRONMENT_SLUG" >> public/index.html
  environment:
      name: staging/$CI_COMMIT_REF_NAME 
      url: $CI_PAGES_URL

job_master:
  stage: deploy
  only:
      - main
  when: manual
  script:
      - echo "data na produkcii" >> public/index.html
  environment:
      name: production
      url: $CI_PAGES_URL

--- GITLAB VARIABLES

GLOBAL VARIABLES -> are set on top level and can be approached by all jobs through all stages.
                   -> you can set them in yml file or on the website. Settings/CI/CD/Variables.
JOB VARIABLES -> are set on job level and can be reached only in that job.

You can set your and then give values when running new pipeline on website. Pipelines/New Pipeline

variables:
    VAR: "value" -> global variable

test-variable:
    variables:
       VAR2: "value2" -> job variable
    stage: test
    script:
        - echo $VAR

General Pipeline and Job Variables

    $CI_PIPELINE_ID: Unique ID of the pipeline.
    $CI_JOB_ID: Unique ID of the job.
    $CI_JOB_NAME: Name of the job.
    $CI_JOB_STAGE: Stage of the current job.
    $CI_JOB_STATUS: Status of the current job (e.g., success, failed).
    $CI_COMMIT_SHA: SHA hash of the commit being built.
    $CI_COMMIT_SHORT_SHA: Shortened version of the commit SHA.
    $CI_COMMIT_REF_NAME: Branch or tag name for the commit.
    $CI_COMMIT_MESSAGE: Full commit message.

Project and Repository Variables

    $CI_PROJECT_ID: Unique ID of the project.
    $CI_PROJECT_NAME: Name of the project.
    $CI_PROJECT_PATH: Path to the project, including namespace (e.g., username/project-name).
    $CI_PROJECT_NAMESPACE: Namespace or group containing the project.
    $CI_PROJECT_URL: URL to the GitLab project.
    $CI_REPOSITORY_URL: URL to the Git repository.

Environment and Deployment Variables

    $CI_ENVIRONMENT_NAME: Name of the environment defined in the .gitlab-ci.yml file.
    $CI_ENVIRONMENT_SLUG: URL-safe version of the environment name.
    $CI_ENVIRONMENT_URL: URL of the environment (useful for GitLab Pages).
    $CI_ENVIRONMENT_ACTION: The action to be performed on the environment (start, stop, or prepare).

User and Runner Information

    $CI_RUNNER_ID: ID of the GitLab Runner used for the job.
    $CI_RUNNER_DESCRIPTION: Description of the GitLab Runner.
    $CI_RUNNER_TAGS: Tags associated with the GitLab Runner.
    $GITLAB_USER_EMAIL: Email of the GitLab user who triggered the pipeline.
    $GITLAB_USER_LOGIN: Username of the GitLab user who triggered the pipeline.

GitLab Pages Specific Variables

    $CI_PAGES_URL: URL of the GitLab Pages site (e.g., https://namespace.gitlab.io/project).

Debugging and Logging Variables

    $CI_DEBUG_TRACE: If set to true, enables debug logging for the job.
    $CI_SERVER_NAME: Name of the GitLab instance.

Customization Variables

    $CI_COMMIT_REF_SLUG: URL-safe version of the branch or tag name.
    $CI_COMMIT_REF_PROTECTED: true if the branch or tag is protected, otherwise false.

--- PIPELINE TRIGGER

On webiste in the project go to settings/cicd/pipeline trigger tokens - you can add new token here and under tokne you have button View trigger token usage examples there you can copy what you need.

EXAMPLE:

curl -X POST \
     --fail \
     -F token=glptt-ff022b454b22faefffdf14861a30a6dba6884453 \
     -F "ref=main" \ -> on which branch it should run. 
     -F "variables[VAR2]=VALUE" \ -> pass variables to pipeline.
     https://gitlab.com/api/v4/projects/64280095/trigger/pipeline

--- CONTAINER REGISTRY

On your project in deploy/container registry, there you can copy commands to add and login to registry.

EXAMPLE:
script: 
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t registry.gitlab.com/marvy936/lab14 . -> change this from commands on website deploy/container
    - docker push registry.gitlab.com/marvy936/lab14 -> change this from commands on website deploy/container


docker login registry.gitlab.com
docker pull registry.gitlab.com/marvy936/lab14

build_main:
  image: docker
  stage: build
  only: 
    - main
  services:
    - docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t registry.gitlab.com/marvy936/lab14/2_plus_3:latest ./2_plus_3/
    - docker push registry.gitlab.com/marvy936/lab14/2_plus_3:latest
    - docker container run registry.gitlab.com/marvy936/lab14/2_plus_3:latest

build_notmain:
  image: docker
  stage: build
  except: 
    - main
  services:
    - docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t registry.gitlab.com/marvy936/lab14/3x3:latest ./3x3/
    - docker push registry.gitlab.com/marvy936/lab14/3x3:latest
    - docker container run registry.gitlab.com/marvy936/lab14/3x3:latest

--- RELEASES

On webiste Deploy/Releases/New Release

or in pipeline like here:

image: registry.gitlab.com/gitlab-org/release-cli:latest -> HAVE TO BE ALWAYS THIS IMAGE when you want to make a release.
variables:
	CI_DEBUG_TRACE: "true" -> variable to control when release is created.

stages:
 - compile
 - storage
 - release

ios-release:
 stage: release
 script:
   - echo 'iOS release job $CI_COMMIT_SHORT_SHA'
 rules:
   - if: $RELEASE == 'true' -> it will run only if variable is set to before run.
 release:
   name: 'Release iOS $CI_COMMIT_SHORT_SHA'
   tag_name: '$CI_COMMIT_SHORT_SHA'
   description: 'iOS release v1.0.0 $CI_COMMIT_SHORT_SHA'
   assets:
     links:
       - name: 'iOS'
         url: 'http://$CI_PAGES_URL/$CI_PROJECT_NAME/program'

--- PACKAGE REGISTRY

curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file {path_to_file} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/{package_name}/1.0.1/HelloWorld.class"

wget --header="JOB-TOKEN: $CI_JOB_TOKEN" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/my_package/1.0.1/HelloWorld.class

$CI_API_V4_URL = https://gitlab.com/api/v4
